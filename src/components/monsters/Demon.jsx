/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/monsters/Demon.glb 
*/

import React, {useEffect} from 'react'
import {useGraph} from '@react-three/fiber'
import {useGLTF, useAnimations} from '@react-three/drei'
import {SkeletonUtils} from 'three-stdlib'
// import {useGameStore} from "../../stores/store.js";
import {LoopOnce} from "three";
import {useMonsterStore} from "../../stores/monsterStore.js";


const anim = {
    0: "CharacterArmature|Death",
    1: "CharacterArmature|Duck",
    2: "CharacterArmature|HitReact",
    3: "CharacterArmature|Idle",
    4: "CharacterArmature|Jump",
    5: "CharacterArmature|Jump_Idle",
    6: "CharacterArmature|Jump_Land",
    7: "CharacterArmature|No",
    8: "CharacterArmature|Punch",
    9: "CharacterArmature|Run",
    10: "CharacterArmature|Walk",
    11: "CharacterArmature|Wave",
    12: "CharacterArmature|Weapon",
    13: "CharacterArmature|Yes",
}

export function Demon({monsterId, ...props}) {
    const group = React.useRef()
    const {scene, animations} = useGLTF('./models/monsters/Demon.glb')
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
    const {nodes, materials} = useGraph(clone)
    const {actions} = useAnimations(animations, group)
    const monsterAnimation = useMonsterStore((state) => state.monsters[monsterId].monsterAnimation)
    // console.log(props)
    if (actions['CharacterArmature|Death']) {
        actions['CharacterArmature|Death'].loop = LoopOnce
        actions['CharacterArmature|Death'].clampWhenFinished = true
    }

    // console.log(monsterAnimation)
    useEffect(() => {
        actions[monsterAnimation].reset().fadeIn(0.2).play()
        return () => {
            actions[monsterAnimation].fadeOut(0.2).play()
        }
    }, [actions, monsterAnimation])
    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Root_Scene">
                <group name="RootNode">
                    <group name="CharacterArmature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                        <primitive object={nodes.Root}/>
                    </group>
                    <group name="Demon" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                        <skinnedMesh name="Demon_1" geometry={nodes.Demon_1.geometry} material={materials.Demon_Main}
                                     skeleton={nodes.Demon_1.skeleton}/>
                        <skinnedMesh name="Demon_2" geometry={nodes.Demon_2.geometry} material={materials.Black}
                                     skeleton={nodes.Demon_2.skeleton}/>
                        <skinnedMesh name="Demon_3" geometry={nodes.Demon_3.geometry} material={materials.Eye_White}
                                     skeleton={nodes.Demon_3.skeleton}/>
                        <skinnedMesh name="Demon_4" geometry={nodes.Demon_4.geometry} material={materials.Eye_Black}
                                     skeleton={nodes.Demon_4.skeleton}/>
                    </group>
                    <skinnedMesh name="Trident" geometry={nodes.Trident.geometry} material={materials.Black}
                                 skeleton={nodes.Trident.skeleton} position={[1.895, 1.734, -0.17]} scale={75.326}/>
                </group>
            </group>
        </group>
    )
}

useGLTF.preload('./models/monsters/Demon.glb')
